[{"id":5,"title":"数组 AlvisArray","content":"#\n\n说明：提供类 js 数组操作，使用 new AlVisArray([])即可创建数组。\n\n\n1. push(params)#\n\n新增数据。\n\n必选参数 1\n\nvalue：数值 实例: arr.push(1)\n\n必选参数 2\n\ncategory：类别，如 x 轴标签或类别标签\n\nvalue: 值，如 y 轴标签或值标签\n\n实例: arr.push({ month: 'Monday1', sales: 55 })，其中 month 为 category，sales 为 value.\n\n\n2.pop()#\n\n删除数组最后一个数据，不提供参数。\n\n\n3. set(params)#\n\n修改数组中的元素。\n\n必选参数\n\ncategory：类别，如 x 轴标签或类别标签\n\nvalue: 值，如 y 轴标签或值标签\n\n实例: arr.set({ month: 'Tuesday', sales: 20 })，其中 month 为 category，sales 为 value.\n\n\n4. insert(params)#\n\n任意位置插入元素。\n\n必选参数\n\ncategory：类别，如 x 轴标签或类别标签\n\nvalue: 值，如 y 轴标签或值标签\n\nplace: 元素插入位置\n\n实例: arr.insert({ month: 'Tuesday2', sales: 200 }, 3)，其中 month 为 category，sales 为\nvalue, 在位置 3 处插入元素.\n\n\n5. delete(params)#\n\n删除数组中任意一个元素。\n\n可选参数\n\ncategory：类别，如 x 轴标签或类别标签\n\nvalue: 值，如 y 轴标签或值标签\n\n实例: arr.delete({ month: 'Tuesday' })或arr.delete({ sales: 200 })，其中 month 为\ncategory，sales 为 value.\n\n\n6. length#\n\n返回数组长度，无参数。","routePath":"/api/data-structure/array","lang":"zh","toc":[{"text":"1. push(params)","id":"1-pushparams","depth":2,"charIndex":48},{"text":"2.pop()","id":"2pop","depth":2,"charIndex":246},{"text":"3. set(params)","id":"3-setparams","depth":2,"charIndex":276},{"text":"4. insert(params)","id":"4-insertparams","depth":2,"charIndex":440},{"text":"5. delete(params)","id":"5-deleteparams","depth":2,"charIndex":643},{"text":"6. length","id":"6-length","depth":2,"charIndex":832}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"栈 AlvisStack","content":"#\n\n说明：提供栈相关操作，使用 new AlVisStack([])即可创建数组。\n\n\n1. push(params)#\n\n入栈。\n\n必选参数 1\n\nvalue：数值\n\n实例: stack.push(1)\n\n必选参数 2\n\ncategory：类别，如 x 轴标签或类别标签\n\nvalue: 值，如 y 轴标签或值标签\n\n实例: stack.push({ month: 'Monday1', sales: 55 })，其中 month 为 category，sales 为\nvalue。\n\n\n2.pop()#\n\n出栈，不提供参数。\n\n\n3. clear()#\n\n清空栈。\n\n\n4. size()#\n\n返回栈的大小。\n\n\n5. isEmpty#\n\n判断栈是否为空。","routePath":"/api/data-structure/stack","lang":"zh","toc":[{"text":"1. push(params)","id":"1-pushparams","depth":2,"charIndex":44},{"text":"2.pop()","id":"2pop","depth":2,"charIndex":245},{"text":"3. clear()","id":"3-clear","depth":2,"charIndex":267},{"text":"4. size()","id":"4-size","depth":2,"charIndex":287},{"text":"5. isEmpty","id":"5-isempty","depth":2,"charIndex":309}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"算法可视化","content":"#\n\n\n数据结构#\n\n 1. 数组 Array\n 2. 栈 Stack\n\n\n算法画廊#\n\n\n暴力#\n\n * 冒泡排序\n\n\n动态规划#\n\n * 斐波那契数列\n * 爬楼梯\n\n\n分治&减治#\n\n * 插入排序\n * 快速排序","routePath":"/api/","lang":"zh","toc":[{"text":"数据结构","id":"数据结构","depth":2,"charIndex":3},{"text":"算法画廊","id":"算法画廊","depth":2,"charIndex":37},{"text":"暴力","id":"暴力","depth":3,"charIndex":45},{"text":"动态规划","id":"动态规划","depth":3,"charIndex":60},{"text":"分治&减治","id":"分治减治","depth":3,"charIndex":86}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"","content":"","routePath":"/gallery/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"","content":"","routePath":"/","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""}]